#!/bin/bash -e

export JAVA_HOME="/usr/lib/jvm/j2sdk1.8-oracle"

PAC=fk-zipkin
PAC_GROUP=fk-w3
PAC_GID=3000
PAC_USER=fk-zipkin
PAC_UID=3046

PIDFILE_PATH=/var/run/${PAC}
LOGS_PATH=/var/log/flipkart/${PAC}
PROCESSES=( "collector" "query" "web" )

function fetch_config() {
    echo "Fetching config from config service using confd..."

    # Determine config service bucket from /etc/fk-zipkin-bucket file
    if [ -f /etc/fk-zipkin-bucket ]; then
        bucket=`cat /etc/fk-zipkin-bucket`
        if [ -z $bucket ]; then
            echo "/etc/fk_zipkin_bucket is empty, exiting".
            exit 1;
        fi
    else
        echo "/etc/fk_zipkin_bucket doesn't exist, exiting".
        exit 1;
    fi
    echo "Using $bucket as config service bucket..."
    # Put the bucket names in toml and restart confd which will read config
    # from config service and creates required configuration files
    sed -i "s/__BUCKET_NAMES__/$bucket/g" /etc/confd/conf.d/collector-cassandra.toml
    sed -i "s/__BUCKET_NAMES__/$bucket/g" /etc/confd/conf.d/query-cassandra.toml
    sudo /etc/init.d/fk-config-service-confd restart

    ATTEMPT=1
    MAX_ATTEMPTS=3
    CONFIG_FILE1="/usr/share/$PAC/zipkin-collector-service/resources/collector-cassandra.scala"
    CONFIG_FILE2="/usr/share/$PAC/zipkin-query-service/resources/query-cassandra.scala"
    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        echo "Sleeping for 5 seconds to let confd create config files..."
        sleep 5;
        if [[ -f $CONFIG_FILE1 && -f $CONFIG_FILE2 ]]; then
            echo "Config files created by confd, proceeding..."
            break;
        fi
        ATTEMPT=`expr $ATTEMPT + 1`;
    done

    if [ $ATTEMPT -gt $MAX_ATTEMPTS ]; then
        echo "Config files not yet created by confd after $MAX_ATTEMPTS, exiting"
        exit 1;
    fi
}

function getCommand() {
    if [ $1 == "collector" ]; then
        echo "/usr/share/${PAC}/zipkin-collector-service/bin/zipkin-collector-service -f /usr/share/${PAC}/zipkin-collector-service/resources/collector-cassandra.scala"
    elif [ $1 == "query" ]; then
        echo "/usr/share/${PAC}/zipkin-query-service/bin/zipkin-query-service -f /usr/share/${PAC}/zipkin-query-service/resources/query-cassandra.scala"
    else
        echo "/usr/share/${PAC}/zipkin-web/bin/zipkin-web -zipkin.web.resourcesRoot=/usr/share/${PAC}/zipkin-web/resources"
    fi
}

function process_status() {
    daemon -n fk-zipkin-$1 -u ${PAC_USER}:${PAC_GROUP} -F ${PIDFILE_PATH}/$1.pid --running -- $(getCommand $i)
    if [ "$?" -eq "0" ]; then
        echo "up";
    else
        echo "down";
    fi
}

function service_status() {
    for i in "${PROCESSES[@]}"
    do
        if [ $(process_status $i) == "up" ]; then
            echo "$i is up";
        else
            echo "$i is down";
        fi
    done
}

function start_service() {
    fetch_config
    for i in "${PROCESSES[@]}"
    do
        if [ $(process_status $i) == "up" ]; then
            echo "$i is already running";
        else
            daemon -n fk-zipkin-$i -u ${PAC_USER}:${PAC_GROUP} -F ${PIDFILE_PATH}/$i.pid -o ${LOGS_PATH}/$i.log --respawn -- $(getCommand $i)
            echo "$i is started";
        fi
    done
}

function stop_service() {
    for i in "${PROCESSES[@]}"
    do
        if [ $(process_status $i) == "up" ]; then
            kill -9 $(ps aux | grep daemon | grep -v grep | grep ${PAC} | awk '{print $2}') || true
            kill -9 $(ps aux | grep java | grep -v grep | grep ${PAC} | awk '{print $2}') || true
            sleep 1
            if [ -f ${PIDFILE_PATH}/$i.pid ]; then
                rm ${PIDFILE_PATH}/$i.pid
            fi
            if [ $(process_status $i) == "down" ]; then
                echo "$i is stopped";
            else
                echo "Failed to stop $i";
            fi
        else
            echo "$i is not running";
        fi
    done
}

case "$1" in
	start) start_service;;
	stop) stop_service;;
	status) service_status;;
esac

exit 0
